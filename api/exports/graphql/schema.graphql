input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Achievements {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Name: String
  Year: String
  Description: String
  published_at: DateTime
  Image(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type AchievementsConnection {
  values: [Achievements]
  groupBy: AchievementsGroupBy
  aggregate: AchievementsAggregator
}

type AchievementsAggregator {
  count: Int
  totalCount: Int
}

type AchievementsGroupBy {
  id: [AchievementsConnectionId]
  created_at: [AchievementsConnectionCreated_at]
  updated_at: [AchievementsConnectionUpdated_at]
  Name: [AchievementsConnectionName]
  Year: [AchievementsConnectionYear]
  Description: [AchievementsConnectionDescription]
  published_at: [AchievementsConnectionPublished_at]
}

type AchievementsConnectionId {
  key: ID
  connection: AchievementsConnection
}

type AchievementsConnectionCreated_at {
  key: DateTime
  connection: AchievementsConnection
}

type AchievementsConnectionUpdated_at {
  key: DateTime
  connection: AchievementsConnection
}

type AchievementsConnectionName {
  key: String
  connection: AchievementsConnection
}

type AchievementsConnectionYear {
  key: String
  connection: AchievementsConnection
}

type AchievementsConnectionDescription {
  key: String
  connection: AchievementsConnection
}

type AchievementsConnectionPublished_at {
  key: DateTime
  connection: AchievementsConnection
}

input AchievementInput {
  Name: String
  Year: String
  Image: [ID]
  Description: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editAchievementInput {
  Name: String
  Year: String
  Image: [ID]
  Description: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createAchievementInput {
  data: AchievementInput
}

type createAchievementPayload {
  achievement: Achievements
}

input updateAchievementInput {
  where: InputID
  data: editAchievementInput
}

type updateAchievementPayload {
  achievement: Achievements
}

input deleteAchievementInput {
  where: InputID
}

type deleteAchievementPayload {
  achievement: Achievements
}

type Articles {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  Publication: String
  Transcription: String
  Date: String
  Language: String
  published_at: DateTime
  Image(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  languages(sort: String, limit: Int, start: Int, where: JSON): [Country]
}

type ArticlesConnection {
  values: [Articles]
  groupBy: ArticlesGroupBy
  aggregate: ArticlesAggregator
}

type ArticlesAggregator {
  count: Int
  totalCount: Int
}

type ArticlesGroupBy {
  id: [ArticlesConnectionId]
  created_at: [ArticlesConnectionCreated_at]
  updated_at: [ArticlesConnectionUpdated_at]
  Title: [ArticlesConnectionTitle]
  Publication: [ArticlesConnectionPublication]
  Transcription: [ArticlesConnectionTranscription]
  Date: [ArticlesConnectionDate]
  Language: [ArticlesConnectionLanguage]
  published_at: [ArticlesConnectionPublished_at]
}

type ArticlesConnectionId {
  key: ID
  connection: ArticlesConnection
}

type ArticlesConnectionCreated_at {
  key: DateTime
  connection: ArticlesConnection
}

type ArticlesConnectionUpdated_at {
  key: DateTime
  connection: ArticlesConnection
}

type ArticlesConnectionTitle {
  key: String
  connection: ArticlesConnection
}

type ArticlesConnectionPublication {
  key: String
  connection: ArticlesConnection
}

type ArticlesConnectionTranscription {
  key: String
  connection: ArticlesConnection
}

type ArticlesConnectionDate {
  key: String
  connection: ArticlesConnection
}

type ArticlesConnectionLanguage {
  key: String
  connection: ArticlesConnection
}

type ArticlesConnectionPublished_at {
  key: DateTime
  connection: ArticlesConnection
}

input ArticleInput {
  Title: String
  Publication: String
  Transcription: String
  Date: String
  Image: [ID]
  Language: String
  languages: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editArticleInput {
  Title: String
  Publication: String
  Transcription: String
  Date: String
  Image: [ID]
  Language: String
  languages: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Articles
}

input updateArticleInput {
  where: InputID
  data: editArticleInput
}

type updateArticlePayload {
  article: Articles
}

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Articles
}

type Artwork {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  Date: String
  Medium: String
  Price: String
  Location: String
  Dimensions: String
  published_at: DateTime
  Image(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  categories(sort: String, limit: Int, start: Int, where: JSON): [Medium]
}

type ArtworkConnection {
  values: [Artwork]
  groupBy: ArtworkGroupBy
  aggregate: ArtworkAggregator
}

type ArtworkAggregator {
  count: Int
  totalCount: Int
}

type ArtworkGroupBy {
  id: [ArtworkConnectionId]
  created_at: [ArtworkConnectionCreated_at]
  updated_at: [ArtworkConnectionUpdated_at]
  Title: [ArtworkConnectionTitle]
  Date: [ArtworkConnectionDate]
  Medium: [ArtworkConnectionMedium]
  Price: [ArtworkConnectionPrice]
  Location: [ArtworkConnectionLocation]
  Dimensions: [ArtworkConnectionDimensions]
  published_at: [ArtworkConnectionPublished_at]
}

type ArtworkConnectionId {
  key: ID
  connection: ArtworkConnection
}

type ArtworkConnectionCreated_at {
  key: DateTime
  connection: ArtworkConnection
}

type ArtworkConnectionUpdated_at {
  key: DateTime
  connection: ArtworkConnection
}

type ArtworkConnectionTitle {
  key: String
  connection: ArtworkConnection
}

type ArtworkConnectionDate {
  key: String
  connection: ArtworkConnection
}

type ArtworkConnectionMedium {
  key: String
  connection: ArtworkConnection
}

type ArtworkConnectionPrice {
  key: String
  connection: ArtworkConnection
}

type ArtworkConnectionLocation {
  key: String
  connection: ArtworkConnection
}

type ArtworkConnectionDimensions {
  key: String
  connection: ArtworkConnection
}

type ArtworkConnectionPublished_at {
  key: DateTime
  connection: ArtworkConnection
}

input ArtworkInput {
  Title: String
  Date: String
  Medium: String
  Price: String
  Location: String
  Dimensions: String
  Image: [ID]
  categories: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editArtworkInput {
  Title: String
  Date: String
  Medium: String
  Price: String
  Location: String
  Dimensions: String
  Image: [ID]
  categories: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createArtworkInput {
  data: ArtworkInput
}

type createArtworkPayload {
  artwork: Artwork
}

input updateArtworkInput {
  where: InputID
  data: editArtworkInput
}

type updateArtworkPayload {
  artwork: Artwork
}

input deleteArtworkInput {
  where: InputID
}

type deleteArtworkPayload {
  artwork: Artwork
}

type Biography {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Name: String
  Biography: String
  Excerpt: String
  Born: Date
  Died: Date
  published_at: DateTime
  Photos(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input BiographyInput {
  Name: String
  Biography: String
  Excerpt: String
  Born: Date
  Died: Date
  Photos: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBiographyInput {
  Name: String
  Biography: String
  Excerpt: String
  Born: Date
  Died: Date
  Photos: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateBiographyInput {
  data: editBiographyInput
}

type updateBiographyPayload {
  biography: Biography
}

type deleteBiographyPayload {
  biography: Biography
}

type Country {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Country: String
  published_at: DateTime
  publications(sort: String, limit: Int, start: Int, where: JSON): [Publication]
  articles(sort: String, limit: Int, start: Int, where: JSON): [Articles]
}

type CountryConnection {
  values: [Country]
  groupBy: CountryGroupBy
  aggregate: CountryAggregator
}

type CountryAggregator {
  count: Int
  totalCount: Int
}

type CountryGroupBy {
  id: [CountryConnectionId]
  created_at: [CountryConnectionCreated_at]
  updated_at: [CountryConnectionUpdated_at]
  Country: [CountryConnectionCountry]
  published_at: [CountryConnectionPublished_at]
}

type CountryConnectionId {
  key: ID
  connection: CountryConnection
}

type CountryConnectionCreated_at {
  key: DateTime
  connection: CountryConnection
}

type CountryConnectionUpdated_at {
  key: DateTime
  connection: CountryConnection
}

type CountryConnectionCountry {
  key: String
  connection: CountryConnection
}

type CountryConnectionPublished_at {
  key: DateTime
  connection: CountryConnection
}

input CountryInput {
  Country: String
  publications: [ID]
  articles: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCountryInput {
  Country: String
  publications: [ID]
  articles: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCountryInput {
  data: CountryInput
}

type createCountryPayload {
  country: Country
}

input updateCountryInput {
  where: InputID
  data: editCountryInput
}

type updateCountryPayload {
  country: Country
}

input deleteCountryInput {
  where: InputID
}

type deleteCountryPayload {
  country: Country
}

type Exhibitions {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  Date: String
  Location: String
  published_at: DateTime
  Poster(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type ExhibitionsConnection {
  values: [Exhibitions]
  groupBy: ExhibitionsGroupBy
  aggregate: ExhibitionsAggregator
}

type ExhibitionsAggregator {
  count: Int
  totalCount: Int
}

type ExhibitionsGroupBy {
  id: [ExhibitionsConnectionId]
  created_at: [ExhibitionsConnectionCreated_at]
  updated_at: [ExhibitionsConnectionUpdated_at]
  Title: [ExhibitionsConnectionTitle]
  Date: [ExhibitionsConnectionDate]
  Location: [ExhibitionsConnectionLocation]
  published_at: [ExhibitionsConnectionPublished_at]
}

type ExhibitionsConnectionId {
  key: ID
  connection: ExhibitionsConnection
}

type ExhibitionsConnectionCreated_at {
  key: DateTime
  connection: ExhibitionsConnection
}

type ExhibitionsConnectionUpdated_at {
  key: DateTime
  connection: ExhibitionsConnection
}

type ExhibitionsConnectionTitle {
  key: String
  connection: ExhibitionsConnection
}

type ExhibitionsConnectionDate {
  key: String
  connection: ExhibitionsConnection
}

type ExhibitionsConnectionLocation {
  key: String
  connection: ExhibitionsConnection
}

type ExhibitionsConnectionPublished_at {
  key: DateTime
  connection: ExhibitionsConnection
}

input ExhibitionInput {
  Title: String
  Date: String
  Poster: [ID]
  Location: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editExhibitionInput {
  Title: String
  Date: String
  Poster: [ID]
  Location: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createExhibitionInput {
  data: ExhibitionInput
}

type createExhibitionPayload {
  exhibition: Exhibitions
}

input updateExhibitionInput {
  where: InputID
  data: editExhibitionInput
}

type updateExhibitionPayload {
  exhibition: Exhibitions
}

input deleteExhibitionInput {
  where: InputID
}

type deleteExhibitionPayload {
  exhibition: Exhibitions
}

type Medium {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Media: String
  published_at: DateTime
  artwork(sort: String, limit: Int, start: Int, where: JSON): [Artwork]
}

type MediumConnection {
  values: [Medium]
  groupBy: MediumGroupBy
  aggregate: MediumAggregator
}

type MediumAggregator {
  count: Int
  totalCount: Int
}

type MediumGroupBy {
  id: [MediumConnectionId]
  created_at: [MediumConnectionCreated_at]
  updated_at: [MediumConnectionUpdated_at]
  Media: [MediumConnectionMedia]
  published_at: [MediumConnectionPublished_at]
}

type MediumConnectionId {
  key: ID
  connection: MediumConnection
}

type MediumConnectionCreated_at {
  key: DateTime
  connection: MediumConnection
}

type MediumConnectionUpdated_at {
  key: DateTime
  connection: MediumConnection
}

type MediumConnectionMedia {
  key: String
  connection: MediumConnection
}

type MediumConnectionPublished_at {
  key: DateTime
  connection: MediumConnection
}

input MediumInput {
  Media: String
  artwork: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editMediumInput {
  Media: String
  artwork: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createMediumInput {
  data: MediumInput
}

type createMediumPayload {
  medium: Medium
}

input updateMediumInput {
  where: InputID
  data: editMediumInput
}

type updateMediumPayload {
  medium: Medium
}

input deleteMediumInput {
  where: InputID
}

type deleteMediumPayload {
  medium: Medium
}

type Publication {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  date: String
  Language: String
  published_at: DateTime
  languages(sort: String, limit: Int, start: Int, where: JSON): [Country]
}

type PublicationConnection {
  values: [Publication]
  groupBy: PublicationGroupBy
  aggregate: PublicationAggregator
}

type PublicationAggregator {
  count: Int
  totalCount: Int
}

type PublicationGroupBy {
  id: [PublicationConnectionId]
  created_at: [PublicationConnectionCreated_at]
  updated_at: [PublicationConnectionUpdated_at]
  Title: [PublicationConnectionTitle]
  date: [PublicationConnectionDate]
  Language: [PublicationConnectionLanguage]
  published_at: [PublicationConnectionPublished_at]
}

type PublicationConnectionId {
  key: ID
  connection: PublicationConnection
}

type PublicationConnectionCreated_at {
  key: DateTime
  connection: PublicationConnection
}

type PublicationConnectionUpdated_at {
  key: DateTime
  connection: PublicationConnection
}

type PublicationConnectionTitle {
  key: String
  connection: PublicationConnection
}

type PublicationConnectionDate {
  key: String
  connection: PublicationConnection
}

type PublicationConnectionLanguage {
  key: String
  connection: PublicationConnection
}

type PublicationConnectionPublished_at {
  key: DateTime
  connection: PublicationConnection
}

input PublicationInput {
  Title: String
  date: String
  Language: String
  languages: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPublicationInput {
  Title: String
  date: String
  Language: String
  languages: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createPublicationInput {
  data: PublicationInput
}

type createPublicationPayload {
  publication: Publication
}

input updatePublicationInput {
  where: InputID
  data: editPublicationInput
}

type updatePublicationPayload {
  publication: Publication
}

input deletePublicationInput {
  where: InputID
}

type deletePublicationPayload {
  publication: Publication
}

type Video {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  Video: String
  File: UploadFile
  Date: String
  Stills: UploadFile
  published_at: DateTime
}

type VideoConnection {
  values: [Video]
  groupBy: VideoGroupBy
  aggregate: VideoAggregator
}

type VideoAggregator {
  count: Int
  totalCount: Int
}

type VideoGroupBy {
  id: [VideoConnectionId]
  created_at: [VideoConnectionCreated_at]
  updated_at: [VideoConnectionUpdated_at]
  Title: [VideoConnectionTitle]
  Video: [VideoConnectionVideo]
  File: [VideoConnectionFile]
  Date: [VideoConnectionDate]
  Stills: [VideoConnectionStills]
  published_at: [VideoConnectionPublished_at]
}

type VideoConnectionId {
  key: ID
  connection: VideoConnection
}

type VideoConnectionCreated_at {
  key: DateTime
  connection: VideoConnection
}

type VideoConnectionUpdated_at {
  key: DateTime
  connection: VideoConnection
}

type VideoConnectionTitle {
  key: String
  connection: VideoConnection
}

type VideoConnectionVideo {
  key: String
  connection: VideoConnection
}

type VideoConnectionFile {
  key: ID
  connection: VideoConnection
}

type VideoConnectionDate {
  key: String
  connection: VideoConnection
}

type VideoConnectionStills {
  key: ID
  connection: VideoConnection
}

type VideoConnectionPublished_at {
  key: DateTime
  connection: VideoConnection
}

input VideoInput {
  Title: String
  Video: String
  File: ID
  Date: String
  Stills: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editVideoInput {
  Title: String
  Video: String
  File: ID
  Date: String
  Stills: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createVideoInput {
  data: VideoInput
}

type createVideoPayload {
  video: Video
}

input updateVideoInput {
  where: InputID
  data: editVideoInput
}

type updateVideoPayload {
  video: Video
}

input deleteVideoInput {
  where: InputID
}

type deleteVideoPayload {
  video: Video
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Achievements | AchievementsConnection | AchievementsAggregator | AchievementsGroupBy | AchievementsConnectionId | AchievementsConnectionCreated_at | AchievementsConnectionUpdated_at | AchievementsConnectionName | AchievementsConnectionYear | AchievementsConnectionDescription | AchievementsConnectionPublished_at | createAchievementPayload | updateAchievementPayload | deleteAchievementPayload | Articles | ArticlesConnection | ArticlesAggregator | ArticlesGroupBy | ArticlesConnectionId | ArticlesConnectionCreated_at | ArticlesConnectionUpdated_at | ArticlesConnectionTitle | ArticlesConnectionPublication | ArticlesConnectionTranscription | ArticlesConnectionDate | ArticlesConnectionLanguage | ArticlesConnectionPublished_at | createArticlePayload | updateArticlePayload | deleteArticlePayload | Artwork | ArtworkConnection | ArtworkAggregator | ArtworkGroupBy | ArtworkConnectionId | ArtworkConnectionCreated_at | ArtworkConnectionUpdated_at | ArtworkConnectionTitle | ArtworkConnectionDate | ArtworkConnectionMedium | ArtworkConnectionPrice | ArtworkConnectionLocation | ArtworkConnectionDimensions | ArtworkConnectionPublished_at | createArtworkPayload | updateArtworkPayload | deleteArtworkPayload | Biography | updateBiographyPayload | deleteBiographyPayload | Country | CountryConnection | CountryAggregator | CountryGroupBy | CountryConnectionId | CountryConnectionCreated_at | CountryConnectionUpdated_at | CountryConnectionCountry | CountryConnectionPublished_at | createCountryPayload | updateCountryPayload | deleteCountryPayload | Exhibitions | ExhibitionsConnection | ExhibitionsAggregator | ExhibitionsGroupBy | ExhibitionsConnectionId | ExhibitionsConnectionCreated_at | ExhibitionsConnectionUpdated_at | ExhibitionsConnectionTitle | ExhibitionsConnectionDate | ExhibitionsConnectionLocation | ExhibitionsConnectionPublished_at | createExhibitionPayload | updateExhibitionPayload | deleteExhibitionPayload | Medium | MediumConnection | MediumAggregator | MediumGroupBy | MediumConnectionId | MediumConnectionCreated_at | MediumConnectionUpdated_at | MediumConnectionMedia | MediumConnectionPublished_at | createMediumPayload | updateMediumPayload | deleteMediumPayload | Publication | PublicationConnection | PublicationAggregator | PublicationGroupBy | PublicationConnectionId | PublicationConnectionCreated_at | PublicationConnectionUpdated_at | PublicationConnectionTitle | PublicationConnectionDate | PublicationConnectionLanguage | PublicationConnectionPublished_at | createPublicationPayload | updatePublicationPayload | deletePublicationPayload | Video | VideoConnection | VideoAggregator | VideoGroupBy | VideoConnectionId | VideoConnectionCreated_at | VideoConnectionUpdated_at | VideoConnectionTitle | VideoConnectionVideo | VideoConnectionFile | VideoConnectionDate | VideoConnectionStills | VideoConnectionPublished_at | createVideoPayload | updateVideoPayload | deleteVideoPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  achievement(id: ID!, publicationState: PublicationState): Achievements
  achievements(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Achievements]
  achievementsConnection(sort: String, limit: Int, start: Int, where: JSON): AchievementsConnection
  article(id: ID!, publicationState: PublicationState): Articles
  articles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Articles]
  articlesConnection(sort: String, limit: Int, start: Int, where: JSON): ArticlesConnection
  artwork(id: ID!, publicationState: PublicationState): Artwork
  artworks(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Artwork]
  artworksConnection(sort: String, limit: Int, start: Int, where: JSON): ArtworkConnection
  biography(publicationState: PublicationState): Biography
  country(id: ID!, publicationState: PublicationState): Country
  countries(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Country]
  countriesConnection(sort: String, limit: Int, start: Int, where: JSON): CountryConnection
  exhibition(id: ID!, publicationState: PublicationState): Exhibitions
  exhibitions(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Exhibitions]
  exhibitionsConnection(sort: String, limit: Int, start: Int, where: JSON): ExhibitionsConnection
  medium(id: ID!, publicationState: PublicationState): Medium
  mediums(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Medium]
  mediumsConnection(sort: String, limit: Int, start: Int, where: JSON): MediumConnection
  publication(id: ID!, publicationState: PublicationState): Publication
  publications(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Publication]
  publicationsConnection(sort: String, limit: Int, start: Int, where: JSON): PublicationConnection
  video(id: ID!, publicationState: PublicationState): Video
  videos(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Video]
  videosConnection(sort: String, limit: Int, start: Int, where: JSON): VideoConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createAchievement(input: createAchievementInput): createAchievementPayload
  updateAchievement(input: updateAchievementInput): updateAchievementPayload
  deleteAchievement(input: deleteAchievementInput): deleteAchievementPayload
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  createArtwork(input: createArtworkInput): createArtworkPayload
  updateArtwork(input: updateArtworkInput): updateArtworkPayload
  deleteArtwork(input: deleteArtworkInput): deleteArtworkPayload
  updateBiography(input: updateBiographyInput): updateBiographyPayload
  deleteBiography: deleteBiographyPayload
  createCountry(input: createCountryInput): createCountryPayload
  updateCountry(input: updateCountryInput): updateCountryPayload
  deleteCountry(input: deleteCountryInput): deleteCountryPayload
  createExhibition(input: createExhibitionInput): createExhibitionPayload
  updateExhibition(input: updateExhibitionInput): updateExhibitionPayload
  deleteExhibition(input: deleteExhibitionInput): deleteExhibitionPayload
  createMedium(input: createMediumInput): createMediumPayload
  updateMedium(input: updateMediumInput): updateMediumPayload
  deleteMedium(input: deleteMediumInput): deleteMediumPayload
  createPublication(input: createPublicationInput): createPublicationPayload
  updatePublication(input: updatePublicationInput): updatePublicationPayload
  deletePublication(input: deletePublicationInput): deletePublicationPayload
  createVideo(input: createVideoInput): createVideoPayload
  updateVideo(input: updateVideoInput): updateVideoPayload
  deleteVideo(input: deleteVideoInput): deleteVideoPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
